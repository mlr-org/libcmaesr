
# use c++11; matches libcmaes
CXX_STD = CXX11

# libcmaes.a static library, built after its cmake build
LIBCMAES = libcmaes/build/src/libcmaes.a
# linker flags for our SHLIB
PKG_LIBS += $(LIBCMAES)

# include libcmaes headers
PKG_CPPFLAGS += -Ilibcmaes/include -Ilibcmaes/build/include
# suppress warnings
PKG_CXXFLAGS += -Wno-unknown-pragmas

# include Eigen flags, e.g. PKG_CPPFLAGS += -I/usr/include/eigen3
-include Makevars.eigen

# build shlib, but depend on static libcmaes.a
# targets created as recommended by WRE
.PHONY: all
all: $(SHLIB)
$(SHLIB): $(LIBCMAES)

# build libcmaes.a via cmake
# switch off a bunch of things we don't need:
#  python bindings, examples, tests, surrogates, openmp
$(LIBCMAES):
	(cd libcmaes; \
	  set -- $$CXX; CXX="$$1" cmake -S . -B build \
	    -DCMAKE_CXX_STANDARD=11 \
	    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	    -DLIBCMAES_BUILD_SHARED_LIBS=OFF \
	    -DLIBCMAES_BUILD_PYTHON=OFF \
	    -DLIBCMAES_BUILD_EXAMPLES=OFF \
	    -DLIBCMAES_ENABLE_SURROG=OFF \
	    -DLIBCMAES_USE_OPENMP=OFF \
	    -DCMAKE_BUILD_TYPE=Release \
	    -DCMAKE_CXX_FLAGS=-Wno-unknown-pragmas; \
	  $(MAKE) -C build)

# make our src files also depend on libcmaes.a
# (inferred by R from all compilable sources in src/; e.g., .c, .cc, .cpp, .f)
# otherwise we get:
# libcmaes/include/libcmaes/pwq_bound_strategy.h:26:10: fatal error: libcmaes/cmaes_export.h: No such file or directory
$(OBJECTS): $(LIBCMAES)



