% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cmaes.R
\name{cmaes}
\alias{cmaes}
\title{Covariance Matrix Adaptation Evolution Strategy}
\usage{
cmaes(objective, x0, lower, upper, control = cmaes_control(), batch = FALSE)
}
\arguments{
\item{objective}{(\verb{function(x)})\cr
Objective function, to minimize.
If \code{batch} is \code{FALSE}, \code{x} is a numeric vector of length \code{n}
and the function must return a scalar \code{numeric}.
If \code{batch} is \code{TRUE}, \code{x} is a numeric matrix with \code{lambda} rows and \code{n} columns.
The function must return a numeric vector of length \code{lambda}.
The latter usually reduces overhead and allows you to orchestrate parallelization
yourself if you need it because the objective function is more expensive.}

\item{x0}{(\code{numeric(n)})\cr
Initial point.
NB: This point is IGNORED if you also set \code{x0_lower} and \code{x0_upper} in the \code{control} object,
but it must still be a vector of length \code{n}!}

\item{lower}{(\code{numeric(n)})\cr
Lower bounds of search space.}

\item{upper}{(\code{numeric(n)})\cr
Upper bounds of search space.}

\item{control}{(\code{cmaes_control})\cr
A control object created by \code{\link[=cmaes_control]{cmaes_control()}}.
Default is a control object with all parameters set to their default values.}

\item{batch}{(\code{logical(1)})\cr
Whether the objective function evaluates a batch of points at once.
Default is \code{FALSE}.}
}
\value{
(name \code{list}). List with elements:
\itemize{
\item 'x': (\code{numeric(n)})\cr
The best point found, length corresponds to x0, lower and upper.
\item 'y': (\code{numeric(1)})\cr
The objective value of the best point.
\item 'edm': (\code{numeric(1)})\cr
Expected distance to the minimum.
\item 'time': (\code{numeric(1)})\cr
The time taken to find the solution in seconds.
\item 'status': (\code{integer(1)})\cr
The status code, indicating success, failure, or the reason for stopping.
See here: \url{https://github.com/CMA-ES/libcmaes/wiki/Optimizing-a-function}
}
}
\description{
Implements the CMA-ES variants provided by libcmaes, see here: \url{https://github.com/CMA-ES/libcmaes/} via
a very light-weight C wrapper.

2.The control structure allows access to most control params of the ES, but CMAES is supposed to handle most of them internally.
Quoting Niko Hansen from here: \url{https://cma-es.github.io/}:

\dQuote{The CMA-ES does not require a tedious parameter tuning for its application. In fact, the choice of strategy internal parameters
is not left to the user (arguably with the exception of population size λ). Finding good (default) strategy parameters is considered
as part of the algorithm design, and not part of its application—the aim is to have a well-performing algorithm as is.
The default population size λ is comparatively small to allow for fast convergence. Restarts with increasing population size
(Auger & Hansen 2005) improve the global search performance. For the application of the CMA-ES, an initial solution,
an initial standard deviation (step-size, variables should be defined such that the same standard deviations can be
reasonably applied to all variables, see also here) and, possibly, the termination criteria (e.g. a function tolerance)
need to be set by the user. The most common applications are model calibration (e.g. curve fitting) and shape optimisation.}

Whether you believe in this completely for any problem is up to you, but the general idea is to run it in its defaults,
and only change them if you know what you are doing.
\enumerate{
\item libcmaes could handle unbounded search spaces, but this is currently not supported, you need to set
lower and upper bounds.
\item Noisy functions / noisy handling CMAES is currently not supported.
\item Surrogate variants are currently not supported.
\item Geno-Pheno transformation is automatically applied, in the sense that we use the linear scaling
to handle the bounds.
\item Setting gradients is currently not supported.
\item OpenMP is currently not supported. libcmaes uses OpenMP for the population evaluation mainly, but also for some Eigen stuff.
Calling into the R Api via threading is not allowed, which would happen in the former.
}

In general, more details can be found here: \url{https://github.com/CMA-ES/libcmaes/wiki/}.
}
